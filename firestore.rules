rules_version = '2';
service cloud.firestore {
match /databases/{database}/documents {

// --- Helper Functions ---

// Safely gets the requesting user's document data.
function getUserData() {
  return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
}

// Checks if the requesting user exists and is part of a family.
function userIsInFamily() {
  let userData = getUserData();
  return userData != null && 'familyId' in userData;
}

// Checks if the requesting user has the 'parent' role.
function isParent() {
  let userData = getUserData();
  return userData != null && 'role' in userData && userData.role == 'parent';
}

// --- Collection Rules ---

match /families/{familyId} {
  allow create: if request.auth != null && request.resource.data.creatorId == request.auth.uid;
  allow read: if userIsInFamily() && getUserData().familyId == familyId;
  allow update: if isParent() && getUserData().familyId == familyId;
  allow delete: if false; // Disallow deleting families for safety.
}

match /users/{userId} {
  // Allow a user to read their own document, OR
  // allow them to read docs of users in the same family.
  allow read: if request.auth.uid == userId ||
              (userIsInFamily() && 'familyId' in resource.data && getUserData().familyId == resource.data.familyId);
  // Allow a user to write to their own document.
  allow write: if request.auth.uid == userId;
}

match /chores/{choreId} {
  allow read: if userIsInFamily() && 'familyId' in resource.data && getUserData().familyId == resource.data.familyId;
  allow create, update, delete: if isParent();
}

match /recurring_chores/{choreId} {
  allow read: if userIsInFamily() && 'familyId' in resource.data && getUserData().familyId == resource.data.familyId;
  allow create, update, delete: if isParent();
}

match /marketplace_items/{itemId} {
  allow read: if userIsInFamily() && 'familyId' in resource.data && getUserData().familyId == resource.data.familyId;
  allow create, delete: if isParent();
}

match /purchased_rewards/{rewardId} {
  allow read: if userIsInFamily() && 'familyId' in resource.data && getUserData().familyId == resource.data.familyId;
  allow create: if request.auth.uid == request.resource.data.purchasedBy;
  allow update: if isParent() || request.auth.uid == resource.data.purchasedBy;
  allow delete: if isParent();
}

match /invites/{inviteId} {
  allow read: if true; // Allow anyone to check for an invite.
  allow create, delete: if isParent(); // Only parents can create/delete.
}

match /activity_feed/{activityId} {
  allow read: if userIsInFamily() && 'familyId' in resource.data && getUserData().familyId == resource.data.familyId;
  allow write: if false; // Only Cloud Functions can write.
}

match /notifications/{notificationId} {
  allow read, update, delete: if request.auth.uid == resource.data.recipientUid;
  allow create: if request.auth != null;
}

match /feedback/{feedbackId} {
  allow read, create: if request.auth != null;
  allow update, delete: if isParent();
}

}
}